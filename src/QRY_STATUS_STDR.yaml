name: FCISTDR/QRY_STATUS_STDR
caption: FCI STDR - Status Fondos
view: | 
    with consulta_dblink as (
        SELECT fci, fund_id
        FROM dblink('dbname=syc user=consyc password=MTU1NDNjN2ZlZGU4ZDdhNDBhZTM2MjA2',
          'select
        	''['' ||unf."CODIGO" || ''] '' || unf."NOMBRE" as fci,
            fid."VALOR" as fund_id
           from "UNI_UNIDAD" unf 
             inner join "UNI_ATRIBUTO" as fid on fid."UNIDAD"= unf."UNI_UNIDAD_ID" and fid."ATRIBUTO"=''FundId Santander''
          ') AS t(fci varchar,fund_id bigint)
    ),
    rescates_nd_suscripciones as (select 
    rs.cantidad_cp::real as cantidad_cp,
    rs."descripción" as descripcion,
    rs.distribucion,
    rs.especie,
    rs.estado,
    rs.fecha_alta,
    rs.id_grupo,
    rs.id_origen,
    rs.id_rescate,
    null as id_suscri,
    rs.log::character varying,
    rs.certificate_id,
    'Rescate' as tipo
    from fcistdr.rescate_status rs
    union
    select 
    ss.cantidad_cp::real as cantidad_cp,
    ss."descripción" as descripcion,
    null as distribucion,
    ss.especie,
    ss.estado,
    ss.fecha_alta,
    null as id_grupo,
    ss.id_origen,
    null as id_rescate,
    ss.id_suscri,
    ss.log::character varying,
    ss.certificate_id,
    'Suscripción' as tipo
    from fcistdr.suscripcion_status ss)
    select * from rescates_nd_suscripciones rns
    inner join consulta_dblink db on db.fund_id = rns.especie
        where (?::character varying is null or tipo=?) 
        and (?::bigint is null or id_origen=?)
        and (?::character varying is null or estado is null or estado=?)
        and (?::bigint is null or certificate_id=?)
        and (?::numeric is null or fecha_alta::date>= (timestamp 'epoch' + ?::numeric * interval '1 ms')::date)
        and (?::numeric is null or fecha_alta::date<= (timestamp 'epoch' + ?::numeric * interval '1 ms')::date)
    order by fecha_alta desc
viewBindings:
- tipo
- tipo
- id_origen
- id_origen
- estado
- estado
- certificate_id
- certificate_id
- fecha_desde
- fecha_desde
- fecha_hasta
- fecha_hasta
columns:
- name: tipo
  caption: Tipo
  fieldType: java.lang.String
- name: certificate_id
  caption: Certificate ID
  fieldType: java.lang.Long
  format: "0"
- name: estado
  caption: Estado
  fieldType: java.lang.String
- name: fci
  caption: FCI
  fieldType: java.lang.String
- name: cantidad_cp
  caption: Cantidad Cuotapartes
  fieldType: java.lang.Double
- name: fecha_alta
  caption: Fecha Alta
  fieldType: java.sql.Date
- name: id_origen
  caption: ID HG
  fieldType: java.lang.Long
  format: "0"
#- name: descripcion
#  caption: Descripción
#  fieldType: java.lang.String
#- name: log
#  caption: Log
#  fieldType: java.lang.String
keys:
- id_origen
sortables: []
targetUsers: []
targetGroups:
- ADMIN
- OPB
filterGroup:
  caption: Filtros
  filters:
  - name: tipo
    caption: Tipo
    fieldType: java.lang.String
    required: false
    dependents: []
    possibleValues:
      - "Suscripción"
      - "Rescate"
  - name: id_origen
    caption: ID HG
    fieldType: java.lang.Integer
    required: false
    dependents: []
  - name: estado
    caption: Estado
    fieldType: java.lang.String
    required: false
    dependents: []
    possibleValues:
      - "CONFIRMED"
      - "FAILED"
      - "NO INGRESADO"
      - "PENDING"
  - name: especie
    caption: Especie
    fieldType: java.lang.String
    required: false
    dependents: []
  - name: certificate_id
    caption: Certificate ID
    fieldType: java.lang.Integer
    dependents: []
  - name: fecha_desde
    caption: Fecha Alta Desde
    fieldType: java.sql.Date
    required: true
    dependents: []
  - name: fecha_hasta
    caption: Fecha Alta Hasta
    fieldType: java.sql.Date
    required: true
    dependents: [ ]
  subgroups: []
  defaultFilter:
    fecha_desde: ;new java.lang.Long(Date.now()- 24*60*60*1000);
    fecha_hasta: ;new java.lang.Long(Date.now());
  uniqueItems: false
dataSource: FLW
dataSourceOptions: {}
details: []
reports: []
services: []
initContextScript: #!run:FCISTDR/SYNC_STDR_STATUS
scripts:
- FCISTDR/QRY_STATUS_STDR_DETAIL
selectionScript: |
    #!python3
    import redflagbpm
    bpm = redflagbpm.BPMService()
    bpm.reply("Cantidad seleccionada: " + str(len(bpm.context["selection"])))
context: {}
exportable: true